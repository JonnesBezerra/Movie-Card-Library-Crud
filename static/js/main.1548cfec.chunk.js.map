{"version":3,"sources":["components/auxiliary/jonnesflix-logo.png","components/auxiliary/Header.jsx","components/MovieCard.js","components/Loading.js","services/movieData.js","services/movieAPI.js","pages/MovieList.js","components/MovieForm.js","pages/MovieDetails.js","pages/NewMovie.js","pages/EditMovie.js","pages/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","src","logo","alt","React","Component","MovieCard","movie","this","props","title","storyline","imagePath","id","data-testid","to","Loading","movies","subtitle","rating","bookmarked","genre","localStorage","setItem","JSON","stringify","data","readMovies","parse","getItem","saveMovies","simulateRequest","response","callback","setTimeout","getMovie","movieId","find","mov","parseInt","Promise","resolve","updateMovie","updatedMovie","map","MovieList","fetchMovies","a","requestedMovies","setState","state","length","key","MovieForm","handleSubmit","bind","onSubmit","field","newValue","htmlFor","placeholder","type","value","onChange","event","target","step","min","max","onClick","renderTitleInput","renderSubtitleInput","renderImagePathInput","renderStorylineInput","renderGenreSelection","renderRatingInput","renderSubmitButton","MovieDetails","fetchMovie","match","params","movieAPI","movieRequired","loading","deleteFilm","filter","status","NewMovie","finishedAdd","newMovie","movieData","nextId","EditMovie","shouldRedirect","movieRequested","NotFound","App","exact","path","component","render","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1548cfec.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/jonnesflix-logo.c5824d31.png\";","import React from 'react';\nimport logo from './jonnesflix-logo.png';\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <header className=\"movie-card-header\">\n        <img className=\"page-title\" src={ logo } alt=\"logo\" />\n      </header>\n    );\n  }\n}\n\nexport default Header;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nclass MovieCard extends React.Component {\n  render() {\n    const { movie } = this.props;\n    const { title, storyline, imagePath, id } = movie;\n    return (\n      <div className=\"movie-card\" data-testid=\"movie-card\">\n        <img src={ imagePath } className=\"movie-card-image\" alt={ title } />\n        <div className=\"movie-card-body\">\n          <h4 className=\"movie-card-title\">{title}</h4>\n          <p className=\"movie-card-storyline\">{storyline}</p>\n        </div>\n        <Link to={ `movies/${id}` } className=\"button view-details\">VER DETALHES</Link>\n      </div>\n    );\n  }\n}\n\nMovieCard.propTypes = {\n  movie: PropTypes.shape({\n    title: PropTypes.string,\n    storyline: PropTypes.string,\n    imagePath: PropTypes.string,\n    id: PropTypes.number,\n  }).isRequired,\n};\n\nexport default MovieCard;\n","import React, { Component } from 'react';\n\nclass Loading extends Component {\n  render() {\n    return (\n      <section className=\"loading-section\">\n        <p className=\"loading\">Carregando...</p>\n      </section>\n    );\n  }\n}\n\nexport default Loading;\n","const movies = [\n  {\n    id: 1,\n    title: 'Kingsglaive',\n    subtitle: 'Final Fantasy XV',\n    storyline: \"King Regis, who oversees the land of Lucis, commands his army of soldiers to protect the kingdom from the Niflheim empire's plans to steal the sacred crystal.\",\n    rating: 4.5,\n    imagePath: 'images/Kingsglaive_Final_Fantasy_XV.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 2,\n    title: 'Final Fantasy',\n    subtitle: 'Spirits Within',\n    storyline: 'A scientist makes a last stand on Earth with the help of a ragtag team of soldiers against an invasion of alien phantoms.',\n    rating: 4.5,\n    imagePath: 'images/Final_Fantasy_Spirits_Within.jpg',\n    bookmarked: false,\n    genre: 'fantasy',\n  },\n  {\n    id: 3,\n    title: 'Ghost In The Shell',\n    subtitle: 'Ghost In The Shell',\n    storyline: 'A hacker known as the Puppet Master is hunted by a female cyborg cop and her partner. This film is a revised version of Ghost in the Shell (1995).',\n    rating: 5,\n    imagePath: 'images/Ghost_In_The_Shell_2_0.jpg',\n    bookmarked: false,\n    genre: 'comedy',\n  },\n  {\n    id: 4,\n    title: 'Appleseed Alpha',\n    subtitle: 'Appleseed Alpha',\n    storyline: \"A young female soldier Deunan and her cyborg partner Briareos survive through the post World War 3 apocalyptic New York in search of human's future hope, the legendary city of Olympus.\",\n    rating: 3.8,\n    imagePath: 'images/Appleseed_Alpha.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 5,\n    title: 'Resident Evil',\n    subtitle: 'Vendetta',\n    storyline: 'Chris Redfield enlists the help of Leon S. Kennedy and Rebecca Chambers to stop a death merchant, with a vengeance, from spreading a deadly virus in New York.',\n    rating: 4.2,\n    imagePath: 'images/Resident_Evil_Vendetta.jpg',\n    bookmarked: true,\n    genre: 'fantasy',\n  },\n];\n\nexport default movies;\n","import data from './movieData';\n\nlocalStorage.setItem('movies', JSON.stringify(data));\n\nconst readMovies = () => JSON.parse(localStorage.getItem('movies'));\nconst saveMovies = (movies) => localStorage.setItem('movies', JSON.stringify(movies));\n\nconst TIMEOUT = 2000;\nconst SUCCESS_STATUS = 'OK';\n\n// --------------------------------------------------------------------\n// A função simulateRequest simula uma requisição para uma API externa\n// Esse tipo de função que \"chama outra função\" é chamada de\n// \"currying function\" https://javascript.info/currying-partials\n// não se preocupe, estudaremos isso mais futuramente\n// --------------------------------------------------------------------\n\nconst simulateRequest = (response) => (callback) => {\n  setTimeout(() => {\n    callback(response);\n  }, TIMEOUT);\n};\n\nexport const getMovies = () => (\n  new Promise((resolve) => {\n    const movies = readMovies();\n    simulateRequest(movies)(resolve);\n  })\n);\n\nexport const getMovie = (movieId) => {\n  const movie = readMovies().find((mov) => mov.id === parseInt(movieId, 10));\n  return new Promise((resolve) => {\n    simulateRequest(movie)(resolve);\n  });\n};\n\nexport const updateMovie = (updatedMovie) => (\n  new Promise((resolve) => {\n    const movies = readMovies().map((movie) => {\n      if (movie.id === parseInt(updatedMovie.id, 10)) {\n        return { ...movie, ...updatedMovie };\n      }\n      return movie;\n    });\n    saveMovies(movies);\n    simulateRequest(SUCCESS_STATUS)(resolve);\n  })\n);\n\nexport const createMovie = (movieData) => (\n  new Promise((resolve) => {\n    let movies = readMovies();\n    const nextId = movies[movies.length - 1].id + 1;\n    const newMovie = { ...movieData, id: nextId };\n    movies = [...movies, newMovie];\n    saveMovies(movies);\n    simulateRequest(SUCCESS_STATUS)(resolve);\n  })\n);\n\nexport const deleteMovie = (movieId) => {\n  let movies = readMovies();\n  movies = movies.filter((movie) => movie.id !== parseInt(movieId, 10));\n  saveMovies(movies);\n\n  return new Promise((resolve) => {\n    simulateRequest({ status: SUCCESS_STATUS })(resolve);\n  });\n};\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport MovieCard from '../components/MovieCard';\nimport Loading from '../components/Loading';\n\nimport * as movieAPI from '../services/movieAPI';\n\nclass MovieList extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      movies: [],\n    };\n  }\n\n  componentDidMount() {\n    this.fetchMovies();\n  }\n\n  fetchMovies = async () => {\n    const requestedMovies = await movieAPI.getMovies();\n    this.setState({\n      movies: requestedMovies,\n    });\n  };\n\n  render() {\n    const { movies } = this.state;\n\n    // Render Loading here if the request is still happening\n    if (movies.length === 0) {\n      return <Loading />;\n    }\n\n    return (\n      <div className=\"home\">\n        <Link className=\"button add-movie-button\" to=\"/movies/new\">ADICIONAR CARTÃO</Link>\n        <div className=\"movie-list\" data-testid=\"movie-list\">\n          { movies.map((movie) => <MovieCard key={ movie.title } movie={ movie } />) }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default MovieList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass MovieForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { ...props.movie };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit() {\n    const { onSubmit } = this.props;\n    onSubmit(this.state);\n  }\n\n  updateMovie(field, newValue) {\n    this.setState({ [field]: newValue });\n  }\n\n  renderTitleInput() {\n    const { title } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_title\">\n          <input\n            placeholder=\"Insira o título\"\n            id=\"movie_title\"\n            type=\"text\"\n            className=\"validate\"\n            value={ title }\n            onChange={ (event) => this.updateMovie('title', event.target.value) }\n          />\n          Título\n        </label>\n      </div>\n    );\n  }\n\n  renderSubtitleInput() {\n    const { subtitle } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_subtitle\">\n          <input\n            placeholder=\"Insira o subtítulo\"\n            id=\"movie_subtitle\"\n            type=\"text\"\n            value={ subtitle }\n            onChange={ (event) => this.updateMovie('subtitle', event.target.value) }\n          />\n          Subtítulo\n        </label>\n      </div>\n    );\n  }\n\n  renderImagePathInput() {\n    const { imagePath } = this.state;\n\n    return (\n      <div className=\"row\">\n        <label htmlFor=\"movie_image\">\n          <input\n            placeholder=\"Insira o caminho da imagem\"\n            id=\"movie_image\"\n            type=\"text\"\n            value={ imagePath }\n            onChange={ (event) => this.updateMovie('imagePath', event.target.value) }\n          />\n          Imagem\n        </label>\n      </div>\n    );\n  }\n\n  renderStorylineInput() {\n    const { storyline } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_storyline\">\n          <textarea\n            id=\"movie_storyline\"\n            value={ storyline }\n            onChange={ (event) => this.updateMovie('storyline', event.target.value) }\n          />\n          Sinopse\n        </label>\n      </div>\n    );\n  }\n\n  renderGenreSelection() {\n    const { genre } = this.state;\n    return (\n      <div>\n        <label htmlFor=\"movie_genre\">\n          Gênero\n          <select\n            id=\"movie_genre\"\n            value={ genre }\n            onChange={ (event) => this.updateMovie('genre', event.target.value) }\n          >\n            <option value=\"action\">Ação</option>\n            <option value=\"comedy\">Comédia</option>\n            <option value=\"thriller\">Suspense</option>\n            <option value=\"fantasy\">Fantasia</option>\n          </select>\n        </label>\n      </div>\n    );\n  }\n\n  renderRatingInput() {\n    const { rating } = this.state;\n    return (\n      <div>\n        <label htmlFor=\"movie_rating\">\n          <input\n            placeholder=\"Dê a avaliação do filme\"\n            id=\"movie_rating\"\n            type=\"number\"\n            step={ 0.1 }\n            min={ 0 }\n            max={ 5 }\n            value={ rating }\n            onChange={ (event) => this.updateMovie('rating', event.target.value) }\n          />\n          Avaliação\n        </label>\n      </div>\n    );\n  }\n\n  renderSubmitButton() {\n    return (\n      <div>\n        <button\n          type=\"button\"\n          onClick={ this.handleSubmit }\n        >\n          Submit\n        </button>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <form>\n          {this.renderTitleInput()}\n          {this.renderSubtitleInput()}\n          {this.renderImagePathInput()}\n          {this.renderStorylineInput()}\n          {this.renderGenreSelection()}\n          {this.renderRatingInput()}\n          {this.renderSubmitButton()}\n        </form>\n      </div>\n    );\n  }\n}\n\nMovieForm.propTypes = {\n  movie: PropTypes.shape({\n    bookmarked: PropTypes.bool,\n    genre: PropTypes.string,\n    id: PropTypes.number,\n    imagePath: PropTypes.string,\n    rating: PropTypes.number,\n    storyline: PropTypes.string,\n    subtitle: PropTypes.string,\n    title: PropTypes.string,\n  }).isRequired,\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default MovieForm;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Link } from 'react-router-dom';\nimport * as movieAPI from '../services/movieAPI';\nimport { Loading } from '../components';\n\nclass MovieDetails extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      movie: [],\n      loading: true,\n    };\n  }\n\n  componentDidMount() {\n    this.fetchMovie();\n  }\n\n  fetchMovie = async () => {\n    const { match: { params: { id } } } = this.props;\n\n    const movieRequired = await movieAPI.getMovie(id);\n\n    this.setState({\n      movie: movieRequired,\n      loading: false,\n    });\n  }\n\n  deleteFilm = () => {\n    const { movie: { id } } = this.state;\n    movieAPI.deleteMovie(id);\n  }\n\n  render() {\n    // Change the condition to check the state\n    const { movie, loading } = this.state;\n\n    if (loading) return <Loading />;\n\n    const { title, storyline, imagePath, genre, rating, subtitle, id } = movie;\n\n    return (\n      <div className=\"movie-card-details\" data-testid=\"movie-details\">\n        <img className=\"movie-card-image\" alt=\"Movie Cover\" src={ `../${imagePath}` } />\n        <div className=\"movie-card-body\">\n          <h1 className=\"movie-card-title\">{ `Title: ${title} `}</h1>\n          <h2 className=\"movie-card-subtitle\">{ `Subtitle: ${subtitle}` }</h2>\n          <p className=\"movie-card-storyline\">{ `Storyline: ${storyline}` }</p>\n          <p className=\"movie-card-storyline\">{ `Genre: ${genre}` }</p>\n        </div>\n        <div className=\"movie-card-rating\">\n          <span className=\"rating\">{ `Rating: ${rating}` }</span>\n        </div>\n        <section className=\"buttons-section\">\n          <Link to=\"/\" className=\"button back-button\">VOLTAR</Link>\n          <Link to={ `/movies/${id}/edit` } className=\"button edit-button\">EDITAR</Link>\n          <Link to=\"/\" onClick={ this.deleteFilm } className=\"button delete-button\">\n            DELETAR\n          </Link>\n        </section>\n      </div>\n    );\n  }\n}\n\nMovieDetails.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string.isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n\nexport default MovieDetails;\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\n\nimport MovieForm from '../components/MovieForm';\nimport * as movieAPI from '../services/movieAPI';\n\nclass NewMovie extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      movie: {\n        genre: '',\n        imagePath: '',\n        rating: 0,\n        storyline: '',\n        subtitle: '',\n        title: '',\n      },\n      finishedAdd: false,\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit(newMovie) {\n    movieAPI.createMovie(newMovie);\n    this.setState({\n      finishedAdd: true,\n    });\n  }\n\n  render() {\n    const { finishedAdd, movie } = this.state;\n\n    if (finishedAdd) return <Redirect to=\"/\" />;\n\n    return (\n      <div data-testid=\"new-movie\">\n        <MovieForm movie={ movie } onSubmit={ this.handleSubmit } />\n      </div>\n    );\n  }\n}\nexport default NewMovie;\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport { MovieForm, Loading } from '../components';\nimport * as movieAPI from '../services/movieAPI';\n\nclass EditMovie extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      movie: [],\n      status: 'loading',\n      shouldRedirect: false,\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.fetchMovie = this.fetchMovie.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchMovie();\n  }\n\n  async handleSubmit(updatedMovie) {\n    await movieAPI.updateMovie(updatedMovie);\n    this.setState({\n      shouldRedirect: true,\n    });\n  }\n\n  async fetchMovie() {\n    const { match: { params: { id } } } = this.props;\n    const movieRequested = await movieAPI.getMovie(id);\n    this.setState({\n      movie: movieRequested,\n      status: 'OK',\n    });\n  }\n\n  render() {\n    const { status, shouldRedirect, movie } = this.state;\n    if (shouldRedirect) {\n      return <Redirect to=\"/\" />;\n    }\n\n    if (status === 'loading') {\n      return <Loading />;\n    }\n\n    return (\n      <div data-testid=\"edit-movie\">\n        <MovieForm movie={ movie } onSubmit={ this.handleSubmit } />\n      </div>\n    );\n  }\n}\n\nEditMovie.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string.isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n\nexport default EditMovie;\n","import React, { Component } from 'react';\n\nclass NotFound extends Component {\n  render() {\n    return <div data-testid=\"404-error\">Página não encontrada</div>;\n  }\n}\n\nexport default NotFound;\n","import React from 'react';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport './App.css';\n\nimport Header from './components/auxiliary/Header';\nimport MovieList from './pages/MovieList';\nimport MovieDetails from './pages/MovieDetails';\nimport NewMovie from './pages/NewMovie';\nimport EditMovie from './pages/EditMovie';\nimport NotFound from './pages/NotFound';\n\nfunction App() {\n  return (\n    <Router>\n      <Header />\n      <Switch>\n        <Route exact path=\"/\" component={ MovieList } />\n        <Route path=\"/movies/new\" component={ NewMovie } />\n        <Route\n          exact\n          path=\"/movies/:id\"\n          render={\n            (props) => <MovieDetails { ...props } />\n          }\n        />\n        <Route path=\"/movies/:id/edit\" component={ EditMovie } />\n        <Route component={ NotFound } />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}